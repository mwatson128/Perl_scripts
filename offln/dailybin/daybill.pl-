#!/bin/perl
#
# Script to run daily billing and glean specific totals.
#
# (]$[) daybill.pl:1.8 | CDATE=03/09/04 13:26:51

use Getopt::Std;

#########################
# General variable setup
#########################
$deltaday = 1;
@week_names = qw "Sun Mon Tue Wed Thu Fri Sat";
$secperday = "86400";
$deltasecs = $secperday * $deltaday;

$LOG = ">> /usw/reports/daily/billing/daily.log";

open LOG or print "WARNING: Can't open $LOG";

print LOG "\n\n>>--- Daily billing report --<<\n";
print LOG "      Started daybill.pl: ", `/bin/date`, "\n";
@rc = `env`;
print LOG @rc, "\n";

getopts('m');

$ARGC = @ARGV;

if ( $ARGC < 1) {

  $DATE = `/usw/offln/bin/getydate -s`;
  $fdate = `/usw/offln/bin/getydate -o sig`;

  $time = time;
  ($sec, $min, $hour, $day, $month, $year, $week, $julian, $isdst) = gmtime $time - $deltasecs;
  $dof = $week_names[$week];
  $tot_day = "$dof: $DATE";

  # Mechinism added to check if prod ops has finished. Check the file
  # /usw/offln/daily/$fdate.billing if it doesn't exist, then billing
  # hasn't competed, wait 15 minutes and try again.
  $fileday = "/usw/offln/daily/$fdate.billing";
  $finished = 0;
  $maxtry = 0;
  while (!$finished && $maxtry <= 8 ) {
    if ( -f $fileday ) {
      # The file from the days billing is present,
      # billing has finished.
      $finished = 1;
      print LOG "      Prior days billing done: ", `/bin/date`, "\n";
    }
    else {
      # The file does not exist.  Billing from the day
      # before hasn't finished.  Wait for it, and quit after 2 hours.
      if ($maxtry < 8) {
        $maxtry++;
      }
      else {
        exit;
      }
      sleep(900);
    }
  }

  # Remove the semaphore file from yesterday.
  `rm /usw/reports/daily/billing/??????.daily`;
  $do_current = true;
}
elsif ( $ARGC == 1 && $ARGV[0] =~ /(\d+)/ ) {

  print "Usage: daybill.pl [DATE Day]\n";
  print "   DATE = Date to run reports for. in mm/dd/yy format.\n";
  print "   Day = 3 letter day of the Week ie Mon.\n";
  print "   All other command line arguments get this message.\n";
  print "Generate daily billing and append to existing file.\n";
  print "Configuration is in maillist.cfg.\n";
  exit;
}
elsif ( $ARGC == 2) {

  chomp ($DATE = $ARGV[0]);

  $day = $ARGV[1];
  $tot_day = "$day: $DATE";
  
}
else {

  print "Usage: daybill.pl [DATE Day]\n";
  print "   DATE = Date to run reports for. in mm/dd/yy format.\n";
  print "   Day = 3 letter day of the Week ie Mon.\n";
  print "   All other command line arguments get this message.\n";
  print "Generate daily billing and append to existing file.\n";
  print "Configuration is in maillist.cfg.\n";
  exit;
}

$DATAFILE = "</usw/reports/daily/billing/maillist.cfg";
#$DATAFILE = "</usw/reports/daily/billing/chn.cfg";  # for testing purposes
@gds_list = ("AA", "\"UA|1V|1C|1G\"", "1P", "1A", "WB", "MS", "HD");

# Read in chains that we need to run billing for. 
open DATAFILE or die "No config file found: $DATAFILE\n";

while (<DATAFILE>) {

  # Please skip blank lines and comments.
  next if /^#|^$/;

  chomp;

  @info  = split /\:/,$_;
  $config_file{$info[1]} = $_;

  for( $i = 2; $i <= $#info; $i++) {
    # Put the chains in a hash, so we get only unique ones.
    $chain_codes{$info[$i]} = $info[$i]; 
  }
 
}
close DATAFILE;

foreach $chain ( sort (keys %chain_codes)) {

  # Need to get newline out of chain.
  chomp($chain);

  @ch_name = split /\|/, $chain;
  $num_ch = @ch_name;
  if ($num_ch > 1) { 
    $fname = lc $ch_name[0];
    $fname .= "con";
  }
  else {
    $fname = lc $ch_name[0];
  }

  # Open the output file for writing.
  $OUTFILE = ">>/usw/reports/daily/billing/data/$fname.bil";
  open OUTFILE or die "Can't open outfile.";

  if ( $chain eq "ALL") {
    # Do billing for all chains 
    @bill_report = `billing -t $DATE`;
  }
  else {
    # Do billing for this chain 
    @bill_report = `billing -t $DATE -h "$chain" `;
  }

  # these are the lines from the billing that we need.
  # so grab the numbers from lines 45 and 58.
  $bill_report[45] =~ /(-*\d+)/;
  $bill_all[0] = $1;
  $bill_report[58] =~ /(-*\d+)/;
  $bill_all[1] = $1;  

  if ( $chain eq "ALL") {

    foreach $gds (@gds_list) {

      # Do billing for this chain and GDS only.
      @bill_report = `billing -t $DATE -a $gds `;

      # search lines 45 & 58 for numbers and save
      # what you find by GDS.
      $bill_report[45] =~ /(-*\d+)/;
      $bill_hash{$gds}[0] = $1;
      $bill_report[58] =~ /(-*\d+)/;
      $bill_hash{$gds}[1] = $1;

    }
  }
  else {

    foreach $gds (@gds_list) {

      # Do billing the this chain and GDS only.
      @bill_report = `billing -t $DATE -h "$chain" -a $gds`;

      # search lines 45 & 58 for numbers and save
      # what you find by GDS.
      $bill_report[45] =~ /(-*\d+)/;
      $bill_hash{$gds}[0] = $1;
      $bill_report[58] =~ /(-*\d+)/;
      $bill_hash{$gds}[1] = $1;

    }
  }
  
  printf OUTFILE "%s %7d   %6d   ", $tot_day, $bill_all[1], $bill_all[0];
  foreach $gds (@gds_list) {
    printf OUTFILE "%7d", $bill_hash{$gds}[0];
  }
  print OUTFILE "\n";
  close OUTFILE;
}

if ($opt_m) {

  print LOG "      Starting to email reports: ", `/bin/date`, "\n";

  foreach $name_split ( sort( keys %config_file )) {

    @user = split /\:/, $config_file{$name_split};
 
    @tmp = split / /, $user[0];
    $name = $tmp[0] . "_" . $tmp[1];

    $MAILFILE = ">tmp.$name";
    open MAILFILE or die "Can't open output file: $MAILFILE";
    print MAILFILE "            $DATE Daily billing summary for ", 
                   $user[0], "\n\n";

    $mailname = "";
    @mailnames = split /,/, $user[1];
    if ($#mailnames < 0 ) {
      foreach $address (@mailnames) {
        $mailname .= $address;
	$mailname .= " ";
      }
    }
    else {
      $mailname = $mailnames[0];
    }

    for ($i = 2; $i <= $#user; $i++) {
    
      @ch_name = split /\|/, $user[$i];
      $num_ch = @ch_name;
      if ($num_ch > 1) {
        $fname = lc $ch_name[0];
        $fname .= "con";
      }
      else {
        $fname = lc $ch_name[0];
      }

      @chns_1 = split /\|/, $user[$i];
      $chn_cnt = @chns_1;
      print MAILFILE "\t    Daily Booking Activity for ";
      if ($chn_cnt > 15) {
        for ($i = 0, $spc = 0; $i < $chn_cnt; $i++, $spc++) {
          if ($spc == 14) { 
            print MAILFILE "\n\t $chns_1[$i]|";
          }
          elsif ($spc == 38 or $spc == 62 or $spc == 86) { 
            print MAILFILE "\n\t $chns_1[$i]|";
          }
	  else {
	    print MAILFILE "$chns_1[$i]|";
	  }
	}
        print MAILFILE "\n\n";
      }
      else {
      	print MAILFILE "$user[$i]",  "\n\n";
      }

      print MAILFILE "               Status     Net ", "\n";
      printf MAILFILE "                Segs    Bookings %7s%7s%7s%7s%7s%7s%7s\n", 
                     "AA", "UA", "1P", "1A", "WB", "MS", "HD";
      $chn_file = qx(tail -14 /usw/reports/daily/billing/data/"$fname".bil);
      print MAILFILE $chn_file, "\n\n";
    }
    close MAILFILE;

    qx(cat tmp.$name | mailx -s "$user[0] Daily Billing for $DATE" $mailname);
    qx(rm tmp.$name);

  }
  
  print LOG "      Finished emailing reports: ", `/bin/date`, "\n";

}
else {
  print LOG "      Not emailing, per command line option.\n";
}

print LOG "      Finished daybill.pl: ", `/bin/date`, "\n";

# If we're doing the current day, put a semaphor file in 
# /usw/reports/daily/billing so other programs
# know that this process has finished.
if ($do_current) {

  $semdate = `/usw/offln/bin/getydate`;
  `touch /usw/reports/daily/billing/$semdate.daily`;

}

print LOG "<<--- Daily billing report -->>\n\n";
close LOG;
